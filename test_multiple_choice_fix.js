import { chromium } from 'playwright';

async function testMultipleChoiceFix() {
  console.log('üß™ Testando corre√ß√£o da m√∫ltipla escolha...');
  
  const browser = await chromium.launch({ headless: false, slowMo: 2000 });
  const page = await browser.newPage();
  
  try {
    // 1. Acessar a p√°gina de demonstra√ß√£o dos Sabotadores
    await page.goto('http://localhost:8083/sabotadores-demo');
    console.log('‚úÖ P√°gina de demonstra√ß√£o carregada');
    
    // 2. Aguardar a p√°gina carregar
    await page.waitForSelector('h1:has-text("Sabotadores do Emagrecimento")', { timeout: 10000 });
    console.log('‚úÖ P√°gina carregada corretamente');
    
    // 3. Verificar se j√° estamos na avalia√ß√£o
    const avaliacaoButton = await page.locator('button:has-text("Avalia√ß√£o")').count();
    console.log(`‚úÖ ${avaliacaoButton} bot√£o(√µes) de avalia√ß√£o encontrado(s)`);
    
    // Se n√£o estiver na avalia√ß√£o, clicar no bot√£o "Avalia√ß√£o"
    if (avaliacaoButton > 0) {
      await page.click('button:has-text("Avalia√ß√£o")');
      console.log('‚úÖ Avalia√ß√£o iniciada');
    }
    
    // 4. Responder a primeira pergunta (escala)
    await page.waitForSelector('text=Com que frequ√™ncia voc√™ come por motivos emocionais?');
    console.log('‚úÖ Primeira pergunta carregada');
    
    // Mover o slider para o meio
    const slider = await page.locator('input[type="range"]');
    await slider.fill('5');
    console.log('‚úÖ Primeira pergunta respondida');
    
    // 5. Ir para a pr√≥xima pergunta (m√∫ltipla escolha)
    await page.click('button:has-text("Pr√≥xima")');
    console.log('‚úÖ Indo para segunda pergunta');
    
    // 6. Aguardar a pergunta de m√∫ltipla escolha
    await page.waitForSelector('text=Voc√™ costuma se criticar quando n√£o segue a dieta?');
    console.log('‚úÖ Segunda pergunta (m√∫ltipla escolha) carregada');
    
    // 7. Verificar se os checkboxes est√£o funcionando
    const checkboxes = await page.locator('input[type="checkbox"]').count();
    console.log(`‚úÖ ${checkboxes} checkboxes encontrados`);
    
    // 8. Selecionar uma op√ß√£o
    await page.click('input[type="checkbox"]');
    console.log('‚úÖ Checkbox clicado');
    
    // 9. Verificar se a sele√ß√£o foi registrada
    const checkedCheckbox = await page.locator('input[type="checkbox"]:checked').count();
    console.log(`‚úÖ ${checkedCheckbox} checkbox(es) selecionado(s)`);
    
    // 10. Selecionar outra op√ß√£o para testar m√∫ltipla sele√ß√£o
    const allCheckboxes = await page.locator('input[type="checkbox"]').all();
    if (allCheckboxes.length > 1) {
      await allCheckboxes[1].click();
      console.log('‚úÖ Segundo checkbox clicado');
      
      const totalChecked = await page.locator('input[type="checkbox"]:checked').count();
      console.log(`‚úÖ Total de ${totalChecked} checkbox(es) selecionado(s)`);
    }
    
    // 11. Ir para a pr√≥xima pergunta
    await page.click('button:has-text("Pr√≥xima")');
    console.log('‚úÖ Indo para terceira pergunta');
    
    // 12. Verificar se chegou na pergunta de matriz
    await page.waitForSelector('text=Classifique estes alimentos');
    console.log('‚úÖ Terceira pergunta (matriz) carregada');
    
    console.log('\nüéâ TESTE COMPLETO: Corre√ß√£o da m√∫ltipla escolha funcionando!');
    console.log('\nüìã RESUMO:');
    console.log('‚úÖ Checkboxes funcionando corretamente');
    console.log('‚úÖ Sele√ß√£o m√∫ltipla implementada');
    console.log('‚úÖ Navega√ß√£o entre perguntas funcionando');
    console.log('‚úÖ Interface Netflix-themed mantida');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
    await page.screenshot({ path: 'multiple_choice_error.png', fullPage: true });
  } finally {
    await browser.close();
  }
}

testMultipleChoiceFix(); 