import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = 'http://localhost:54321';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU';

const supabase = createClient(supabaseUrl, supabaseKey);

async function detailedPermissionsReview() {
  try {
    console.log('üîç REVIS√ÉO DETALHADA DE PERMISS√ïES');
    console.log('=' .repeat(50));

    // 1. VERIFICAR ESTRUTURA DA TABELA PROFILES
    console.log('\nüìã 1. ESTRUTURA DA TABELA PROFILES:');
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('*')
      .limit(3);

    if (profilesError) {
      console.error('‚ùå Erro ao buscar profiles:', profilesError);
    } else if (profiles && profiles.length > 0) {
      const profile = profiles[0];
      console.log('üìä Colunas dispon√≠veis:');
      Object.keys(profile).forEach(key => {
        console.log(`   - ${key}: ${typeof profile[key]} = ${JSON.stringify(profile[key])}`);
      });
    }

    // 2. VERIFICAR USU√ÅRIOS EXISTENTES
    console.log('\nüìã 2. USU√ÅRIOS EXISTENTES:');
    const { data: allUsers, error: allUsersError } = await supabase
      .from('profiles')
      .select('id, email, full_name, admin_level, created_at')
      .order('admin_level', { ascending: false });

    if (!allUsersError && allUsers) {
      allUsers.forEach((user, index) => {
        const level = user.admin_level || 0;
        const status = level >= 999 ? 'üëë Super Admin' : level >= 100 ? 'üîß Admin' : 'üë§ Usu√°rio';
        console.log(`   ${index + 1}. ${user.full_name} (${user.email})`);
        console.log(`      - ID: ${user.id}`);
        console.log(`      - admin_level: ${level} ${status}`);
        console.log(`      - Criado: ${user.created_at}`);
        console.log('');
      });
    }

    // 3. VERIFICAR POL√çTICAS DE ACESSO
    console.log('\nüìã 3. POL√çTICAS DE ACESSO (RLS):');
    console.log('   Verificando pol√≠ticas para coaching_tools...');
    
    // Tentar acessar coaching_tools para ver as pol√≠ticas
    const { data: tools, error: toolsError } = await supabase
      .from('coaching_tools')
      .select('*')
      .limit(1);

    if (toolsError) {
      console.log(`   ‚ùå Erro ao acessar coaching_tools: ${toolsError.message}`);
      console.log(`   üí° Isso pode indicar problemas de permiss√£o`);
    } else {
      console.log('   ‚úÖ Acesso a coaching_tools permitido');
    }

    // 4. VERIFICAR TABELA AUTH.USERS
    console.log('\nüìã 4. VERIFICANDO AUTH.USERS:');
    console.log('   Tentando acessar auth.users...');
    
    // Tentar acessar auth.users
    const { data: authUsers, error: authError } = await supabase
      .from('auth.users')
      .select('id, email, raw_user_meta_data')
      .limit(3);

    if (authError) {
      console.log(`   ‚ùå Erro ao acessar auth.users: ${authError.message}`);
    } else if (authUsers && authUsers.length > 0) {
      console.log('   ‚úÖ Usu√°rios em auth.users:');
      authUsers.forEach((user, index) => {
        console.log(`   ${index + 1}. ${user.email} (${user.id})`);
        console.log(`      - raw_user_meta_data: ${JSON.stringify(user.raw_user_meta_data)}`);
        console.log('');
      });
    }

    // 5. VERIFICAR CONFIGURA√á√ÉO DO SUPABASE
    console.log('\nüìã 5. CONFIGURA√á√ÉO DO SUPABASE:');
    console.log(`   URL: ${supabaseUrl}`);
    console.log(`   Key: ${supabaseKey.substring(0, 20)}...`);
    console.log(`   Service Role: Sim`);

    // 6. VERIFICAR TABELAS DO SISTEMA
    console.log('\nüìã 6. TABELAS DO SISTEMA:');
    const tables = ['profiles', 'coaching_tools', 'coaching_sessions', 'notifications', 'admin_access'];
    
    for (const table of tables) {
      const { data, error } = await supabase
        .from(table)
        .select('*')
        .limit(1);
      
      if (error) {
        console.log(`   ‚ùå ${table}: ${error.message}`);
      } else {
        console.log(`   ‚úÖ ${table}: Acess√≠vel`);
      }
    }

    // 7. AN√ÅLISE DO PROBLEMA DE LOGIN
    console.log('\nüìã 7. AN√ÅLISE DO PROBLEMA DE LOGIN:');
    console.log('   üîç Poss√≠veis causas:');
    console.log('   1. Usu√°rio n√£o existe em auth.users');
    console.log('   2. Senha n√£o est√° criptografada corretamente');
    console.log('   3. Pol√≠ticas RLS bloqueando acesso');
    console.log('   4. Configura√ß√£o de autentica√ß√£o incorreta');
    console.log('   5. Usu√°rio n√£o tem permiss√µes de login');

    // 8. VERIFICAR SE O USU√ÅRIO SUPER ADMIN EXISTE EM AUTH.USERS
    console.log('\nüìã 8. VERIFICANDO SUPER ADMIN EM AUTH.USERS:');
    const superAdminId = 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa';
    
    const { data: superAdminAuth, error: superAdminAuthError } = await supabase
      .from('auth.users')
      .select('*')
      .eq('id', superAdminId)
      .single();

    if (superAdminAuthError) {
      console.log(`   ‚ùå Super Admin n√£o encontrado em auth.users: ${superAdminAuthError.message}`);
      console.log('   üí° Isso explica o erro de login!');
    } else {
      console.log('   ‚úÖ Super Admin encontrado em auth.users:');
      console.log(`      - ID: ${superAdminAuth.id}`);
      console.log(`      - Email: ${superAdminAuth.email}`);
      console.log(`      - raw_user_meta_data: ${JSON.stringify(superAdminAuth.raw_user_meta_data)}`);
    }

    console.log('\nüéØ CONCLUS√ÉO:');
    console.log('   O problema de login provavelmente est√° relacionado a:');
    console.log('   1. Usu√°rio n√£o existe em auth.users');
    console.log('   2. Senha n√£o est√° configurada corretamente');
    console.log('   3. Sistema de autentica√ß√£o n√£o reconhece o usu√°rio');

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

detailedPermissionsReview(); 