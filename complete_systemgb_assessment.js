import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = 'http://127.0.0.1:54321';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU';

const supabase = createClient(supabaseUrl, supabaseKey);

async function completeSystemGBAssessment() {
  try {
    console.log('ü§ñ Completando avalia√ß√£o SistemaGB automaticamente...');
    
    // 1. Verificar usu√°rio Larissa
    console.log('\nüë§ Verificando usu√°rio Larissa...');
    const { data: larissa, error: userError } = await supabase
      .from('profiles')
      .select('*')
      .eq('email', 'larissabarbosa@gmail.com')
      .single();
      
    if (userError) {
      console.error('‚ùå Erro ao buscar usu√°rio:', userError);
      return;
    }
    
    console.log('‚úÖ Usu√°rio encontrado:', larissa.full_name);
    
    // 2. Verificar ferramenta SistemaGB
    console.log('\nüîß Verificando ferramenta SistemaGB...');
    const { data: systemGB, error: toolError } = await supabase
      .from('coaching_tools')
      .select('*')
      .eq('id', 2)
      .single();
      
    if (toolError) {
      console.error('‚ùå Erro ao buscar ferramenta:', toolError);
      return;
    }
    
    console.log('‚úÖ Ferramenta encontrada:', systemGB.name);
    
    // 3. Verificar assignment
    console.log('\nüìã Verificando assignment...');
    const { data: assignment, error: assignmentError } = await supabase
      .from('assessment_assignments')
      .select('*')
      .eq('user_id', larissa.id)
      .eq('tool_id', 2)
      .eq('status', 'pending')
      .single();
      
    if (assignmentError) {
      console.error('‚ùå Erro ao buscar assignment:', assignmentError);
      return;
    }
    
    console.log('‚úÖ Assignment encontrado, status:', assignment.status);
    
    // 4. Gerar respostas realistas para SistemaGB
    console.log('\nüìù Gerando respostas realistas para SistemaGB...');
    
    const questions = systemGB.question_data;
    const answers = {};
    
    // Respostas realistas para SistemaGB (bem-estar e qualidade de vida)
    const realisticAnswers = {
      "Fisiol√≥gico": 7,      // Boa sa√∫de f√≠sica
      "Emocional": 6,        // Est√°vel emocionalmente
      "Mental": 7,           // Boa sa√∫de mental
      "Social": 8,           // Boas rela√ß√µes sociais
      "Espiritual": 6,       // Equil√≠brio espiritual
      "Financeiro": 7,       // Boa situa√ß√£o financeira
      "Profissional": 8,     // Satisfa√ß√£o profissional
      "Ambiental": 7,        // Ambiente saud√°vel
      "Intelectual": 8,      // Desenvolvimento intelectual
      "Recreativo": 7,       // Tempo de lazer
    };
    
    questions.forEach((question, index) => {
      const category = question.category;
      const baseScore = realisticAnswers[category] || 7;
      
      // Adicionar varia√ß√£o realista (¬±1 ponto)
      const variation = Math.random() > 0.5 ? 1 : -1;
      const finalScore = Math.max(1, Math.min(10, baseScore + variation));
      
      answers[question.number] = finalScore;
      
      console.log(`   ${question.number}. ${question.text} (${category}): ${finalScore}/10`);
    });
    
    // 5. Calcular pontua√ß√£o
    console.log('\nüìä Calculando pontua√ß√£o...');
    const scores = Object.values(answers);
    const averageScore = scores.reduce((a, b) => a + b, 0) / scores.length;
    
    console.log('‚úÖ Pontua√ß√£o calculada:');
    console.log(`   - Pontua√ß√£o m√©dia: ${averageScore.toFixed(2)}/10`);
    console.log(`   - Pontua√ß√£o m√≠nima: ${Math.min(...scores)}/10`);
    console.log(`   - Pontua√ß√£o m√°xima: ${Math.max(...scores)}/10`);
    
    // 6. Salvar resultado
    console.log('\nüíæ Salvando resultado...');
    const { data: result, error: resultError } = await supabase
      .from('assessment_results')
      .insert({
        user_id: larissa.id,
        tool_id: 2,
        score: averageScore,
        results_data: {
          answers,
          averageScore,
          categoryScores: realisticAnswers,
          completedAt: new Date().toISOString()
        }
      })
      .select('id')
      .single();
      
    if (resultError) {
      console.error('‚ùå Erro ao salvar resultado:', resultError);
      return;
    }
    
    console.log('‚úÖ Resultado salvo com sucesso!');
    console.log(`   - ID do resultado: ${result.id}`);
    
    // 7. Atualizar assignment como conclu√≠do
    console.log('\n‚úÖ Atualizando assignment como conclu√≠do...');
    const { error: updateError } = await supabase
      .from('assessment_assignments')
      .update({
        status: 'completed',
        result_id: result.id,
        completed_at: new Date().toISOString()
      })
      .eq('id', assignment.id);
      
    if (updateError) {
      console.error('‚ùå Erro ao atualizar assignment:', updateError);
      return;
    }
    
    console.log('‚úÖ Assignment atualizado com sucesso!');
    
    // 8. Verificar resultado final
    console.log('\nüîç Verificando resultado final...');
    const { data: finalAssignment, error: finalError } = await supabase
      .from('assessment_assignments')
      .select(`
        *,
        assessment_results:result_id (*)
      `)
      .eq('id', assignment.id)
      .single();
      
    if (finalError) {
      console.error('‚ùå Erro ao verificar resultado final:', finalError);
      return;
    }
    
    console.log('‚úÖ Resultado final:');
    console.log(`   - Status: ${finalAssignment.status}`);
    console.log(`   - Pontua√ß√£o: ${finalAssignment.assessment_results?.score}`);
    console.log(`   - Conclu√≠do em: ${finalAssignment.completed_at}`);
    
    // 9. Verificar todas as avalia√ß√µes da Larissa
    console.log('\nüìä Verificando todas as avalia√ß√µes da Larissa...');
    const { data: allAssignments, error: allError } = await supabase
      .from('assessment_assignments')
      .select(`
        *,
        coaching_tools:tool_id (name),
        assessment_results:result_id (score)
      `)
      .eq('user_id', larissa.id)
      .order('created_at', { ascending: false });
      
    if (allError) {
      console.error('‚ùå Erro ao buscar todas as avalia√ß√µes:', allError);
    } else {
      console.log('‚úÖ Todas as avalia√ß√µes da Larissa:');
      allAssignments.forEach((assignment, index) => {
        console.log(`   ${index + 1}. ${assignment.coaching_tools.name} - ${assignment.status} - ${assignment.assessment_results?.score || 'N/A'}/10`);
      });
    }
    
    // 10. Gerar links
    console.log('\nüîó Links gerados:');
    console.log(`   - Resultados SistemaGB: http://localhost:8082/assessment/results/${result.id}`);
    console.log(`   - Dashboard Larissa: http://localhost:8082/dashboard`);
    
    console.log('\nüéâ Avalia√ß√£o SistemaGB completada automaticamente com sucesso!');
    console.log('üìä Resumo da avalia√ß√£o SistemaGB da Larissa:');
    console.log(`   - Ferramenta: ${systemGB.name}`);
    console.log(`   - Pontua√ß√£o geral: ${averageScore.toFixed(1)}/10`);
    console.log(`   - Status: Conclu√≠da`);
    console.log(`   - Usu√°rio: ${larissa.full_name}`);
    console.log(`   - Total de avalia√ß√µes: ${allAssignments?.length || 0}`);
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

// Executar a conclus√£o autom√°tica
completeSystemGBAssessment(); 