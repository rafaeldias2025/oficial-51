import { chromium } from 'playwright';

async function testSendToolAsHuman() {
  console.log('ü§ñ Iniciando teste automatizado como humano...');
  
  const browser = await chromium.launch({ 
    headless: false, // Mostra o navegador para voc√™ ver
    slowMo: 1000 // Desacelera para simular humano
  });
  
  const context = await browser.newContext();
  const page = await context.newPage();
  
  try {
    // 1. Acessar a aplica√ß√£o
    console.log('üì± Acessando aplica√ß√£o...');
    await page.goto('http://localhost:8080');
    await page.waitForTimeout(3000);
    
    // 2. Fazer login como admin
    console.log('üîê Fazendo login como administrador...');
    
    // Tentar diferentes seletores para o bot√£o de login
    try {
      await page.click('text=Login', { timeout: 5000 });
    } catch {
      try {
        await page.click('text=Entrar', { timeout: 5000 });
      } catch {
        try {
          await page.click('button:has-text("Login")', { timeout: 5000 });
        } catch {
          console.log('‚ö†Ô∏è Bot√£o de login n√£o encontrado, tentando acessar diretamente...');
        }
      }
    }
    
    await page.waitForTimeout(2000);
    
    // Preencher email se os campos existirem
    try {
      await page.fill('input[type="email"]', 'admin@institutodossonhos.com');
      await page.waitForTimeout(500);
    } catch (error) {
      console.log('‚ö†Ô∏è Campo de email n√£o encontrado');
    }
    
    // Preencher senha se o campo existir
    try {
      await page.fill('input[type="password"]', 'admin123');
      await page.waitForTimeout(500);
    } catch (error) {
      console.log('‚ö†Ô∏è Campo de senha n√£o encontrado');
    }
    
    // Tentar clicar em entrar
    try {
      await page.click('button:has-text("Entrar")');
      await page.waitForTimeout(3000);
    } catch (error) {
      console.log('‚ö†Ô∏è Bot√£o entrar n√£o encontrado');
    }
    
    // 3. Navegar para o painel admin
    console.log('‚öôÔ∏è Navegando para o painel admin...');
    try {
      await page.click('text=Admin');
      await page.waitForTimeout(2000);
    } catch {
      try {
        await page.click('a[href*="admin"]');
        await page.waitForTimeout(2000);
      } catch {
        console.log('‚ö†Ô∏è Link admin n√£o encontrado, tentando URL direta...');
        await page.goto('http://localhost:8080/admin');
        await page.waitForTimeout(2000);
      }
    }
    
    // 4. Ir para Gerenciar Ferramentas
    console.log('üõ†Ô∏è Acessando Gerenciar Ferramentas...');
    try {
      await page.click('text=Gerenciar Ferramentas');
      await page.waitForTimeout(2000);
    } catch {
      try {
        await page.click('text=Tool Manager');
        await page.waitForTimeout(2000);
      } catch {
        console.log('‚ö†Ô∏è Link Gerenciar Ferramentas n√£o encontrado, tentando URL direta...');
        await page.goto('http://localhost:8080/admin/tools');
        await page.waitForTimeout(2000);
      }
    }
    
    // 5. Clicar no bot√£o "Enviar" da primeira ferramenta
    console.log('üì§ Clicando no bot√£o Enviar...');
    try {
      await page.click('button:has-text("Enviar")');
      await page.waitForTimeout(2000);
    } catch {
      console.log('‚ö†Ô∏è Bot√£o Enviar n√£o encontrado');
      return;
    }
    
    // 6. Configurar o envio no modal
    console.log('‚öôÔ∏è Configurando envio no modal...');
    
    // Buscar usu√°rio
    try {
      await page.fill('input[placeholder*="nome ou email"]', 'teste');
      await page.waitForTimeout(1000);
    } catch {
      console.log('‚ö†Ô∏è Campo de busca n√£o encontrado');
    }
    
    // Selecionar primeiro usu√°rio
    try {
      await page.click('input[type="checkbox"]');
      await page.waitForTimeout(500);
    } catch {
      console.log('‚ö†Ô∏è Checkbox n√£o encontrado');
    }
    
    // Adicionar mensagem personalizada
    try {
      await page.fill('textarea[placeholder*="mensagem personalizada"]', 'Teste automatizado - Ferramenta enviada via script!');
      await page.waitForTimeout(1000);
    } catch {
      console.log('‚ö†Ô∏è Campo de mensagem n√£o encontrado');
    }
    
    // 7. Enviar a ferramenta
    console.log('üöÄ Enviando ferramenta...');
    try {
      await page.click('button:has-text("Enviar Ferramenta")');
      await page.waitForTimeout(3000);
    } catch {
      console.log('‚ö†Ô∏è Bot√£o Enviar Ferramenta n√£o encontrado');
    }
    
    // 8. Verificar confirma√ß√£o
    console.log('‚úÖ Verificando confirma√ß√£o...');
    try {
      const successMessage = await page.textContent('text=Sucesso');
      if (successMessage) {
        console.log('üéâ Ferramenta enviada com sucesso!');
      } else {
        console.log('‚ùå Erro no envio da ferramenta');
      }
    } catch {
      console.log('‚ö†Ô∏è Mensagem de confirma√ß√£o n√£o encontrada');
    }
    
    // 9. Fazer logout
    console.log('üëã Fazendo logout...');
    try {
      await page.click('text=Sair');
      await page.waitForTimeout(2000);
    } catch {
      console.log('‚ö†Ô∏è Bot√£o Sair n√£o encontrado');
    }
    
    console.log('‚úÖ Teste conclu√≠do!');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  } finally {
    await browser.close();
  }
}

// Executar o teste
testSendToolAsHuman().catch(console.error); 