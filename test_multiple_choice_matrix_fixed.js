import { chromium } from 'playwright';

async function testMultipleChoiceMatrixFixed() {
  const browser = await chromium.launch({ headless: false, slowMo: 2000 });
  const page = await browser.newPage();

  try {
    console.log('üß™ Testando corre√ß√µes em m√∫ltipla escolha e matriz...');
    await page.goto('http://localhost:8083/sabotadores-demo');
    await page.waitForTimeout(3000);

    // Verificar se a p√°gina carregou
    const pageTitle = await page.locator('h1:has-text("Sabotadores do Emagrecimento")');
    if (await pageTitle.isVisible()) {
      console.log('‚úÖ T√≠tulo da p√°gina encontrado');
    } else {
      console.log('‚ùå T√≠tulo da p√°gina n√£o encontrado');
    }

    // Verificar primeira pergunta (escala)
    const primeiraPergunta = await page.locator('h3:has-text("Com que frequ√™ncia voc√™ come por motivos emocionais?")');
    if (await primeiraPergunta.isVisible()) {
      console.log('‚úÖ Primeira pergunta (escala) encontrada');
      
      // Testar slider
      const slider = await page.locator('input[type="range"]');
      if (await slider.isVisible()) {
        console.log('‚úÖ Slider encontrado');
        
        // Mover o slider
        await slider.fill('5');
        await page.waitForTimeout(1000);
        console.log('‚úÖ Slider movido para valor 5');
      } else {
        console.log('‚ùå Slider n√£o encontrado');
      }
    } else {
      console.log('‚ùå Primeira pergunta n√£o encontrada');
    }

    // Ir para a segunda pergunta (m√∫ltipla escolha)
    const proximaButton = await page.locator('button:has-text("Pr√≥xima")');
    if (await proximaButton.isVisible()) {
      await proximaButton.click();
      await page.waitForTimeout(2000);

      // Verificar segunda pergunta (m√∫ltipla escolha)
      const segundaPergunta = await page.locator('h3:has-text("Voc√™ costuma se criticar quando n√£o segue a dieta?")');
      if (await segundaPergunta.isVisible()) {
        console.log('‚úÖ Segunda pergunta (m√∫ltipla escolha) encontrada');
        
        // Verificar se h√° op√ß√µes de m√∫ltipla escolha
        const opcoes = await page.locator('input[type="radio"]');
        const opcoesCount = await opcoes.count();
        console.log(`‚úÖ Encontradas ${opcoesCount} op√ß√µes de m√∫ltipla escolha`);
        
        if (opcoesCount > 0) {
          // Clicar na primeira op√ß√£o
          await opcoes.first().click();
          await page.waitForTimeout(1000);
          console.log('‚úÖ Clicou na primeira op√ß√£o de m√∫ltipla escolha');
          
          // Verificar se a op√ß√£o foi selecionada
          const opcaoSelecionada = await page.locator('input[type="radio"]:checked');
          if (await opcaoSelecionada.count() > 0) {
            console.log('‚úÖ Op√ß√£o de m√∫ltipla escolha selecionada com sucesso');
          } else {
            console.log('‚ùå Op√ß√£o de m√∫ltipla escolha n√£o foi selecionada');
          }
        }
      } else {
        console.log('‚ùå Segunda pergunta n√£o encontrada');
      }
    } else {
      console.log('‚ùå Bot√£o "Pr√≥xima" n√£o encontrado');
    }

    // Ir para a terceira pergunta (matriz)
    const proximaButton2 = await page.locator('button:has-text("Pr√≥xima")');
    if (await proximaButton2.isVisible()) {
      await proximaButton2.click();
      await page.waitForTimeout(2000);

      // Verificar terceira pergunta (matriz)
      const terceiraPergunta = await page.locator('h3:has-text("Classifique estes alimentos de acordo com sua frequ√™ncia de consumo quando est√° estressado(a)")');
      if (await terceiraPergunta.isVisible()) {
        console.log('‚úÖ Terceira pergunta (matriz) encontrada');
        
        // Verificar se h√° tabela
        const tabela = await page.locator('table');
        if (await tabela.isVisible()) {
          console.log('‚úÖ Tabela da matriz encontrada');
          
          // Verificar se h√° c√©lulas da tabela
          const celulas = await page.locator('td');
          const celulasCount = await celulas.count();
          console.log(`‚úÖ Encontradas ${celulasCount} c√©lulas na tabela`);
          
          // Verificar se h√° radio buttons na matriz
          const radioButtons = await page.locator('input[type="radio"]');
          const radioCount = await radioButtons.count();
          console.log(`‚úÖ Encontrados ${radioCount} radio buttons na matriz`);
          
          if (radioCount > 0) {
            // Clicar no primeiro radio button da matriz
            await radioButtons.first().click();
            await page.waitForTimeout(1000);
            console.log('‚úÖ Clicou no primeiro radio button da matriz');
            
            // Verificar se o radio button foi selecionado
            const radioSelecionado = await page.locator('input[type="radio"]:checked');
            if (await radioSelecionado.count() > 0) {
              console.log('‚úÖ Radio button da matriz selecionado com sucesso');
            } else {
              console.log('‚ùå Radio button da matriz n√£o foi selecionado');
            }
          }
        } else {
          console.log('‚ùå Tabela da matriz n√£o encontrada');
        }
      } else {
        console.log('‚ùå Terceira pergunta n√£o encontrada');
      }
    } else {
      console.log('‚ùå Bot√£o "Pr√≥xima" n√£o encontrado');
    }

    // Tirar screenshot
    await page.screenshot({ path: 'test_multiple_choice_matrix_fixed.png' });
    console.log('üì∏ Screenshot salvo como test_multiple_choice_matrix_fixed.png');

  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
    await page.screenshot({ path: 'error_multiple_choice_matrix_fixed.png' });
  } finally {
    await browser.close();
  }
}

testMultipleChoiceMatrixFixed(); 