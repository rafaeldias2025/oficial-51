import { chromium } from 'playwright';

async function testUserAuthentication() {
  const browser = await chromium.launch({ headless: false, slowMo: 2000 });
  const page = await browser.newPage();

  try {
    console.log('üß™ Testando autentica√ß√£o do usu√°rio...');
    await page.goto('http://localhost:8083/sabotadores-demo');
    await page.waitForTimeout(3000);

    // Verificar se a p√°gina carregou
    console.log('\n=== VERIFICANDO P√ÅGINA ===');
    const pageTitle = await page.locator('h1:has-text("Sabotadores do Emagrecimento")');
    if (await pageTitle.isVisible()) {
      console.log('‚úÖ P√°gina carregada com sucesso');
    } else {
      console.log('‚ùå P√°gina n√£o carregou');
    }

    // Verificar se h√° bot√£o de login/logout
    console.log('\n=== VERIFICANDO AUTENTICA√á√ÉO ===');
    const loginButton = await page.locator('button:has-text("Login")');
    const logoutButton = await page.locator('button:has-text("Logout")');
    const userMenu = await page.locator('[data-testid="user-menu"]');
    
    if (await loginButton.isVisible()) {
      console.log('‚úÖ Bot√£o de login encontrado - usu√°rio n√£o autenticado');
      
      // Tentar fazer login (se necess√°rio)
      await loginButton.click();
      await page.waitForTimeout(2000);
      
      // Verificar se apareceu o formul√°rio de login
      const loginForm = await page.locator('input[type="email"]');
      if (await loginForm.isVisible()) {
        console.log('‚úÖ Formul√°rio de login apareceu');
        
        // Preencher dados de login (usando dados de teste)
        await loginForm.fill('test@example.com');
        const passwordInput = await page.locator('input[type="password"]');
        if (await passwordInput.isVisible()) {
          await passwordInput.fill('password123');
          
          const submitButton = await page.locator('button:has-text("Entrar")');
          if (await submitButton.isVisible()) {
            await submitButton.click();
            await page.waitForTimeout(3000);
            console.log('‚úÖ Tentativa de login realizada');
          }
        }
      }
    } else if (await logoutButton.isVisible() || await userMenu.isVisible()) {
      console.log('‚úÖ Usu√°rio j√° est√° autenticado');
    } else {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel determinar o status de autentica√ß√£o');
    }

    // Verificar se h√° mensagens de erro relacionadas ao usu√°rio
    console.log('\n=== VERIFICANDO CONSOLE ===');
    const logs = await page.evaluate(() => {
      return window.console.logs || [];
    });
    
    const userErrors = logs.filter(log => 
      log.includes('usu√°rio') || 
      log.includes('user') || 
      log.includes('autenticado') || 
      log.includes('login')
    );
    
    if (userErrors.length > 0) {
      console.log('‚ö†Ô∏è Erros relacionados ao usu√°rio encontrados:', userErrors);
    } else {
      console.log('‚úÖ Nenhum erro relacionado ao usu√°rio encontrado');
    }

    // Tentar navegar pelas perguntas para ver se h√° problemas
    console.log('\n=== TESTANDO NAVEGA√á√ÉO ===');
    const proximaButton = await page.locator('button:has-text("Pr√≥xima")');
    if (await proximaButton.isVisible()) {
      console.log('‚úÖ Bot√£o "Pr√≥xima" encontrado');
      
      // Clicar algumas vezes para navegar pelas perguntas
      for (let i = 0; i < 3; i++) {
        if (await proximaButton.isVisible()) {
          await proximaButton.click();
          await page.waitForTimeout(1000);
          console.log(`‚úÖ Navegou para pergunta ${i + 2}`);
        } else {
          console.log(`‚ö†Ô∏è Bot√£o "Pr√≥xima" n√£o encontrado na pergunta ${i + 2}`);
          break;
        }
      }
    } else {
      console.log('‚ùå Bot√£o "Pr√≥xima" n√£o encontrado');
    }

    // Verificar se h√° bot√£o "Finalizar"
    console.log('\n=== VERIFICANDO FINALIZA√á√ÉO ===');
    const finalizarButton = await page.locator('button:has-text("Finalizar")');
    if (await finalizarButton.isVisible()) {
      console.log('‚úÖ Bot√£o "Finalizar" encontrado');
      
      // Tentar clicar no bot√£o finalizar para ver se h√° erro de usu√°rio
      await finalizarButton.click();
      await page.waitForTimeout(2000);
      
      // Verificar se apareceu algum alerta ou erro
      const alert = await page.locator('.alert, .error, [role="alert"]');
      if (await alert.isVisible()) {
        const alertText = await alert.textContent();
        console.log('‚ö†Ô∏è Alerta encontrado:', alertText);
      } else {
        console.log('‚úÖ Nenhum alerta encontrado ao finalizar');
      }
    } else {
      console.log('‚ùå Bot√£o "Finalizar" n√£o encontrado');
    }

    // Tirar screenshot
    await page.screenshot({ path: 'test_user_authentication.png' });
    console.log('\nüì∏ Screenshot salvo como test_user_authentication.png');

  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
    await page.screenshot({ path: 'error_user_authentication.png' });
  } finally {
    await browser.close();
  }
}

testUserAuthentication(); 